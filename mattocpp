#include "mat.h"
#include <iostream>
#include <vector>
#include<armadillo>
using namespace arma;
using namespace std;



 int matread(const char *file, umat&locations, vec & values, vec&y)
{
    // open MAT-file
    MATFile *pmat = matOpen(file, "r");
    if (pmat == NULL) {cout<<"unable to open file \n"; exit(1);}
 int cols;
    // extract the specified variable
    mxArray *arr = matGetVariable(pmat, "data");
    if (arr != NULL && mxIsDouble(arr) && !mxIsEmpty(arr)) {
        // copy data
        mwSize num = mxGetNumberOfElements(arr);
        double *pr = mxGetPr(arr);
        // first find the dim of the data
        int sample_size = mxGetM(arr);
        cols        =mxGetN(arr);
         mwIndex *irs=mxGetIr(arr);
         mwIndex *jcs=mxGetJc(arr);
        mwSize element  = *(&jcs[0]+cols);

        // allocate memory to locations,values and y
       cout<<sample_size<<","<<cols<<", nnz: "<<element<<endl;// actual no. of nonzeros is stored in last column of jc array
        locations.set_size(2,element); //adding bias
        values.set_size(element);
        uword i=0;
        for(;i<sample_size;i++){
        	locations(0,i)=i;
            locations(1,i)=0;
            values(i)=1;

        }
       y.set_size(sample_size);

      double *prs=mxGetPr(arr);
     // cout<<"y:"<<endl;
      for(uword j=0;j<sample_size;j++)
       {
            y(j) = *prs;
            prs++;
       }


     for(uword j=1;j<cols;j++)
     {
      for(i=1;i<=(jcs[j+1]-jcs[j]);i++)
      {
            locations(0,jcs[j]-1+i) =*(irs+sample_size);
            irs++;
            locations(1,jcs[j]-1+i) = j;

            values(jcs[j]-1+i) = *prs;
            prs++;

      }
     }


    }



    // cleanup
    mxDestroyArray(arr);
    matClose(pmat);

    return cols;
}

int main(int agrc, char*argv[])
{
   // std::vector<double> v;
    umat loc;
    vec val;
    vec y;
   char myfile[1024];
   strncpy(myfile,argv[1],strlen(argv[1])+1);
   cout<<"reading...\n";
  int columns= matread(myfile, loc,val,y);
    cout<<"reading finished...\n";
   // y.print();

    sp_mat m(loc,val);
   // m.print();
    cout<<m.n_rows<<","<<m.n_cols<<endl;
// may be possible that last n columns are all zeros  in the original matrix, so we resize it.
if(columns != m.n_cols)
    m.resize(m.n_rows,columns);
  cout<<m.n_rows<<","<<m.n_cols<<endl;

  //sp_mat m1(m.cols(0,114366));
  //cout<<sum(sum(m.cols(114367,150360)))<<endl;

   // for (size_t i=0; i<v.size(); ++i)
   //     std::cout << v[i] << std::endl;
    return 0;
}
